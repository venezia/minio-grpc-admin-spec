syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = ".;v1";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Minio Administrative API";
        version: "v0.1.0";
        contact: {
            name: "Michael Venezia";
            url: "https://github.com/venezia";
            email: "mvenezia@gmail.com";
        };
    };
    external_docs: {
        url: "https://github.com/venezia/minio-admin-spec";
        description: "More about Minio Administration API";
    };
    security: {
        security_requirement: {
            key: "authentication";
            value: {
                scope: "openid";
                scope: "email";
            }
        }
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

service minioadmin {
    // Will return version information about api server
    rpc GetVersionInformation (GetVersionMsg) returns (GetVersionReply) {
        option (google.api.http) = {
            get : "/api/minioadmin/v1/version"
        };
    }
    rpc GetServerInformation (GetServerInformationMsg) returns (GetServerInformationReply) {
        option (google.api.http) = {
            get : "/api/minioadmin/v1/server"
        };
    }
}

message GetServerInformationMsg {
    Endpoint endpoint = 1;
}

message GetServerInformationReply {
    string mode = 1;
    repeated string domain = 2;
    string region = 3;
    repeated string sqs_arn = 4;
    string deployment_id = 5;
    Buckets buckets = 6;
    Objects objects = 7;
    Usage usage = 8;
    Services services = 9;
    oneof backend {
        FSBackendType fs_backend = 10;
        ErasureBackendType erasure_backend = 11;
    }
    repeated ServerProperties servers = 12;

    message Buckets {
        uint64 count = 1;
    }

    message Objects {
        uint64 count = 1;
    }

    message Usage {
        uint64 size = 1;
    }

    message Services {
        Vault vault = 1;
        LDAP ldap = 2;
        repeated Logger loggers = 3;
        repeated Audit audits = 4;
        repeated Notifications notifications = 5;

        message Vault {
            string status = 1;
            string encrypt = 2;
            string decrypt = 3;
        }

        message LDAP {
            string status = 1;
        }

        message Logger {
            repeated LoggerMap logger_map = 1;

            message LoggerMap {
                string key = 1;
                string status = 2;
            }
        }

        message Audit {
            repeated AuditMap audit_map = 1;

            message AuditMap {
                string key = 1;
                string status = 2;
            }
        }

        message Notifications {
            repeated NotificationMap notification_map = 1;

            message NotificationMap {
                string key = 1;
                repeated TargetIDStatus target_id_status = 2;

                message TargetIDStatus {
                    repeated TargetIDStatusMap target_id_status_map = 1;

                    message TargetIDStatusMap {
                        string key = 1;
                        string status = 2;
                    }
                }
            }
        }
    }

    message FSBackendType {
        string backend_type = 1;
    }

    message ErasureBackendType {
        string backend_type = 1;
        int32 online_disks = 2;
        int32 offline_disks = 3;
        int32 standard_sc_data = 4;
        int32 standard_sc_parity = 5;
        int32 rrsc_data = 6;
        int32 rrsc_parity = 7;
    }

    message ServerProperties {
        string state = 1;
        string endpoint = 2;
        int64 uptime = 3;
        string version = 4;
        string commit_id = 5;
        repeated Network network = 6;
        repeated Disk disks = 7;

        message Network {
            string name = 1;
            string value = 2;
        }

        message Disk {
            string endpoint = 1;
            bool root_disk = 2;
            string drive_path = 3;
            bool healing = 4;
            string state = 5;
            string uuid = 6;
            string model = 7;
            uint64 total_space = 8;
            uint64 used_space = 9;
            uint64 available_space = 10;
            float read_throughput = 11;
            float write_throughput = 12;
            float read_latency = 13;
            float write_latency = 14;
            float utilization = 15;
        }
    }
}

message GetVersionMsg {
}

message Endpoint {
    string endpoint = 1;
    string access_key_id = 2;
    string secret_access_key = 3;
    bool ssl = 4;
}

message GetVersionReply {
    // If operation was OK
    bool ok = 1;

    message VersionInformation {
        // The tag on the git repository
        string git_version = 1;
        // The hash of the git commit
        string git_commit = 2;
        // Whether or not the tree was clean when built
        string git_tree_state = 3;
        // Date of build
        string build_date = 4;
        // Version of go used to compile
        string go_version = 5;
        // Compiler used
        string compiler = 6;
        // Platform it was compiled for / running on
        string platform = 7;
    }

    // Version Information
    VersionInformation version_information = 2;
}

